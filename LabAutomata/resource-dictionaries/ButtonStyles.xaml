<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Style x:Key="SubmitResetBtn"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              Background="{TemplateBinding Background}">
                            <TextBlock Text="{TemplateBinding Content}"
                                       Foreground="{StaticResource FontTwo}"
                                       Margin="{TemplateBinding Margin}"
                                       VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property ="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Button}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource {x:Type ToggleButton}}"
           TargetType="{x:Type RadioButton}"
           x:Key="MenuBtn">
        <Style.Setters>
            <!-- This could be done via setting the ToggleButton.ControlTemplate-->
            <Setter Property="Template">
                <Setter.Value>
                    <!-- specify the TargetType so we can accuratley access it's properties-->
                    <ControlTemplate TargetType="RadioButton">
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource BlueSelection }"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                        <Grid VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              Background="{TemplateBinding Background}">
                            <!--template bindings must be used with dependency properties-->
                            <!-- they are an optimized form of a binding for template scenarios
                            and are analogous to:
                                {Binding RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}-->

                            <!-- we can bind to the TargetType's properties - i.e. Content -->
                            <TextBlock Text="{TemplateBinding Content}"
                                       Foreground="{StaticResource FontOne}"
                                       Margin="{TemplateBinding Margin}"
                                       VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style.Setters>
        <Style.Triggers>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource RedSelection}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>